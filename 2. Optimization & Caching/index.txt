const isUnique = (arr) => {
  let result = true;
  for (let i = 0; i < arr.length; i++) {
    console.log(`~~~~ OUTER LOOP ~~~~ i === ${i}`);
    for (let j = 0; j < arr.length; j++) {
      console.log(`~~~~ INNER LOOP ~~~~ j === ${j}`);
      if (i !== j && arr[i] === arr[j]) {
        result = false;
      }
    }
  }
  return result;
};
console.log(isUnique([1,2,3]) === true);
// console.log(isUnique([1,1,3]) === false);

---> The Time complexity in the about is n^2. We can do better.

isUnique = (arr) => {
  const breadcrumbs = {};
  let result = true;
  for (let i = 0; i < arr.length; i++) {
    console.log(`~~~~ LOOP ~~~~ i === ${i}`);
    if (breadcrumbs[arr[i]]) { //check if in object
      result = false; ---> Not Unique
    } else {
      breadcrumbs[arr[i]] = true; //save in object
    }
  }  
  return result;
};
console.log(isUnique([1,2,3]) === true);
// console.log(isUnique([1,1,3]) === false);

---> This method is the breadcrumbs method it involves just looping thru 
--->the array once and storing checking values in a object mor like caching. 

//Task: Transform this simple sorting algorithm into a unique sort. 
// It should not return any duplicate values in the sorted array.
//input: [1,5,2,1] => output: [1,2,5]
//input: [4,2,2,3,2,2,2] => output: [2,3,4]
const uniqSort = function(arr) {
    const breadcrumbs = {};
    return arr.sort((a, b) => a - b);
};
uniqSort([4,2,2,3,2,2,2]); // => [2,3,4]

SOLUTION 
//Task: Transform this simple sorting algorithm into a unique sort, 
meaning that it should not return any duplicate values in the sorted array.
const uniqSort = function(arr) {
    const breadcrumbs = {arr[0]:true}; // ---> fixing the bug of if the first element appears in the array we sorting.
    const result = [arr[0]];  
    for (let i = 0; i < arr.length; i++) { // start loop at 1 as element 0 can never be a duplicate
        if (!breadcrumbs[arr[i]]) {
            result.push(arr[i]);
            breadcrumbs[arr[i]] = true;
        }
    }
    return result.sort((a, b) => a - b);
};
uniqSort([4,2,2,3,2,2,2]); // => [2,3,4]