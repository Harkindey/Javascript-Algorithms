Intro To Our DS
- Stacks & Queues
- Linked Lists (how references to data works instead of having data by value)
- Hash Tables
- Arrays & Strings


Stack
    stores items in a last-in, first-out (LIFO) order.
Queue
    stores items in a first-in, first-out (FIFO) order.
Pros of Stack and Queues
    Fast operations

Stack & Queue IRL
JavaScript engines have a call stack and message queue that executes your code at runtime
When you hit 'undo' in your text editor or 'back' in your browser, you are using a stack

const stack = [1,2,3,4];
stack.push(5); 
// [1,2,3,4,5]
stack.pop();
// -> 5
// [1,2,3,4]

const queue = [1,2,3,4];
queue.enqueue(5); 
// [1,2,3,4,5]
queue.dequeue();
// -> 1
// [2,3,4,5]

Linked List
organizes items sequentially, with each item storing a pointer to the next

 Pros	               Cons
-Fast operations     -Costly lookups
on the ends	
-Flexible size	

Linked List IRL
- Linked Lists are often the underlying data structure for a stack or queue.
- You can implement a Least Recently Used cache using a linked list.
- Hash tables often use linked lists to handle collisions(more on this later)

- SINGLY LINKED LIST
const linkedlist = {
  head: {
    value: 1
    next: {
      value: 2
      next: {
        value: 3
        next: null (tail)
      }
    }
  }
}
{
    value: 1,
    next: {POINTER},
}

-- DOUBLY LINKED LIST

const linkedlist = {
  head: {
    value: 1
    next: {
      value: 2
      previous: {POINTER}
      next: {
        value: 3
        next: null (tail)
        previous: {POINTER}
      }
    }
  }
}

{
    value: 1,
    next: {POINTER},
    previous: {POINTER},
}





